{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Foundations of Data Science\n",
    "## Homework 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Student Name: Arnav Shah\n",
    "\n",
    "Student Netid: ads798\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 1: Case study\n",
    "- Read [this article](http://www.nytimes.com/2012/02/19/magazine/shopping-habits.html) in the New York Times.\n",
    "- Use what we've learned in class and from the book to describe how one could set Target's problem up as a predictive modeling problem, such that they could have gotten the results that they did.  Formulate your solution as a proposed plan using our data science terminology.  Include aspects of the Data Science Workflow that you see as relevant to solving the problem.  Be precise but concise."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data Science Workflow:\n",
    "\n",
    "Goal : To detect whether a customer is pregnant or not on the basis of buying patterns without informing that customer.\n",
    "\n",
    "Full Data is available: Extract the relevant data.\n",
    "\n",
    "Prediction :  To estimate the woman's pregnancy.\n",
    "\n",
    "Sampling data: Used Stratified Sampling.\n",
    "\n",
    "Data relevance: The data related to customer buying patterns and various other data like demographic information of the customer are relevant.\n",
    "\n",
    "Privacy issues: There can be issues like\n",
    "How could one get the advertisements into expectant mothers’ hands without making it appear someone was spying on them? \n",
    "How do you take advantage of someone’s habits without letting them know you’re studying their lives?\n",
    "Some of these women might be a little upset if they received an advertisement making it obvious Target was studying their reproductive status.\n",
    "\n",
    "Data Mining: Market Basket Analysis can be used here.\n",
    "\n",
    "Anomalies: Small Changes in buying patterns.\n",
    "\n",
    "Patterns: The buying patterns of customers.\n",
    "\n",
    "Model: Pregnancy Prediction Model\n",
    "\n",
    "What we Learnt: In which ways is the various information related to the customer buying habits can be used to predict the pregnancy?\n",
    "\n",
    "Results value: The results make sense due to the accuracy as mentioned in the example related to the manager and his daughter here.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 2: Exploring data in the command line\n",
    "For this part we will be using the data file located in `\"data/advertising_events.csv\"`. This file consists of records that pertain to some online advertising events on a given day. There are 4 comma separated columns in this order: `userid`, `timestamp`, `domain`, and `action`. These fields are of type `int` (continuous), `int` (continuous), `string`, and `int` (category) respectively. Answer the following questions using Linux/Unix bash commands. All questions can be answered in one line (sometimes, with pipes)! Some questions will have many possible solutions. Don't forget that in IPython notebooks you must prefix all bash commands with an exclamation point, i.e. `\"!command arguments\"`.\n",
    "\n",
    "[Hints: You can experiment with whatever you want in the notebook and then delete things to construct your answer later.  You can also use ssh to use the actual bash shell on EC2 and then just paste your answers here. Recall that once you enter the \"!\" then filename completion should work.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1\\. How many records (lines) are in this file?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10341 advertising_events.csv\n"
     ]
    }
   ],
   "source": [
    "!wc -l advertising_events.csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2\\. How many unique users are in this file? (hint: consider the 'cut' command and use pipe operator '|')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "732\n"
     ]
    }
   ],
   "source": [
    "!cut -d ',' -f 1 advertising_events.csv | sort | uniq | wc -l   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3\\. Rank all domains by the number of visits they received in descending order. (hint: consider the 'cut', 'uniq' and 'sort' commands and the pipe operator)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   1036 youtube.com\n",
      "   1034 yahoo.com\n",
      "    513 wikipedia.org\n",
      "    321 twitter.com\n",
      "    316 taobao.com\n",
      "    382 qq.com\n",
      "   3114 google.com\n",
      "   2092 facebook.com\n",
      "   1022 baidu.com\n",
      "    511 amazon.com\n"
     ]
    }
   ],
   "source": [
    "!cut -d ',' -f 3 advertising_events.csv | sort -r | uniq -c"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4\\. List all records for the user with user id 37. (hint: this can be done using 'grep')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "37,648061658,google.com,0\n",
      "37,642479972,google.com,2\n",
      "37,644493341,facebook.com,2\n",
      "37,654941318,facebook.com,1\n",
      "37,649979874,baidu.com,1\n",
      "37,653061949,yahoo.com,1\n",
      "37,655020469,google.com,3\n",
      "37,640878012,amazon.com,0\n",
      "37,659864136,youtube.com,1\n",
      "37,640361378,yahoo.com,1\n",
      "37,653862134,facebook.com,0\n",
      "37,648828970,youtube.com,0\n"
     ]
    }
   ],
   "source": [
    "!grep -w '37' advertising_events.csv\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 3: Dealing with data Pythonically"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# You might find these packages useful. You may import any others you want!\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1\\. Load the data set `\"data/ads_dataset.tsv\"` into a Python Pandas data frame called `ads`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "ads = pd.read_csv(r'D:\\Users\\DELL\\Desktop\\FDS\\data\\ads_dataset.tsv', sep = \"\\t\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2\\. Write a Python function called `getDfSummary()` that does the following:\n",
    "- Takes as input a data frame\n",
    "- For each variable in the data frame calculates the following features:\n",
    "  - `number_nan` to count the number of missing not-a-number values\n",
    "  - Ignoring missing, NA, and Null values:\n",
    "    - `number_distinct` to count the number of distinct values a variable can take on\n",
    "    - `mean`, `max`, `min`, `std` (standard deviation), and `25%`, `50%`, `75%` to correspond to the appropriate percentiles\n",
    "- All of these new features should be loaded in a new data frame. Each row of the data frame should be a variable from the input data frame, and the columns should be the new summary features.\n",
    "- Returns this new data frame containing all of the summary information\n",
    "\n",
    "Hint: The pandas `describe()` [(manual page)](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.describe.html) method returns a useful series of values that can be used here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def getDfSummary(input_data):\n",
    "    number_nan=input_data.isnull().sum()\n",
    "    number_distinct=input_data.apply(lambda x: len(x.unique()))\n",
    "    mean=input_data.mean()\n",
    "    max=input_data.max()\n",
    "    min=input_data.min()\n",
    "    std=input_data.std()\n",
    "    \n",
    "    pe=input_data.quantile(.25)\n",
    "    pt=input_data.quantile(.5)\n",
    "    pr=input_data.quantile(.75)\n",
    "    \n",
    "    output_data=pd.DataFrame({'number_nan':number_nan,'number_distinct':number_distinct,'mean':mean,'max':max,'min':min,'std':std,'25%':pe,'50%':pt,'75%':pr})\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    return output_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3\\. How long does it take for your `getDfSummary()` function to work on your `ads` data frame? Show us the results below.\n",
    "\n",
    "Hint: `%timeit getDfSummary(ads)`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 loop, best of 3: 209 ms per loop\n"
     ]
    }
   ],
   "source": [
    "%timeit getDfSummary(ads)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4\\. Using the results returned from `getDfSummary()`, which fields, if any, contain missing `NaN` values?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "      <th>mean</th>\n",
       "      <th>min</th>\n",
       "      <th>number_distinct</th>\n",
       "      <th>number_nan</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>isbuyer</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.042632</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.202027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>buy_freq</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>15.00000</td>\n",
       "      <td>1.240653</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>11</td>\n",
       "      <td>52257</td>\n",
       "      <td>0.782228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>visit_freq</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>84.00000</td>\n",
       "      <td>1.852777</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>2.921820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>buy_interval</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>174.62500</td>\n",
       "      <td>0.210008</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>295</td>\n",
       "      <td>0</td>\n",
       "      <td>3.922016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sv_interval</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.104167</td>\n",
       "      <td>184.91670</td>\n",
       "      <td>5.825610</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>5886</td>\n",
       "      <td>0</td>\n",
       "      <td>17.595442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>expected_time_buy</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>84.28571</td>\n",
       "      <td>-0.198040</td>\n",
       "      <td>-181.9238</td>\n",
       "      <td>348</td>\n",
       "      <td>0</td>\n",
       "      <td>4.997792</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>expected_time_visit</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>91.40192</td>\n",
       "      <td>-10.210786</td>\n",
       "      <td>-187.6156</td>\n",
       "      <td>15135</td>\n",
       "      <td>0</td>\n",
       "      <td>31.879722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>last_buy</th>\n",
       "      <td>18.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>105.000000</td>\n",
       "      <td>188.00000</td>\n",
       "      <td>64.729335</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>189</td>\n",
       "      <td>0</td>\n",
       "      <td>53.476658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>last_visit</th>\n",
       "      <td>18.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>105.000000</td>\n",
       "      <td>188.00000</td>\n",
       "      <td>64.729335</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>189</td>\n",
       "      <td>0</td>\n",
       "      <td>53.476658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>multiple_buy</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.006357</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.079479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>multiple_visit</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.277444</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.447742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uniq_urls</th>\n",
       "      <td>30.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>155.000000</td>\n",
       "      <td>206.00000</td>\n",
       "      <td>86.569343</td>\n",
       "      <td>-1.0000</td>\n",
       "      <td>207</td>\n",
       "      <td>0</td>\n",
       "      <td>61.969765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>num_checkins</th>\n",
       "      <td>127.0</td>\n",
       "      <td>319.0</td>\n",
       "      <td>802.000000</td>\n",
       "      <td>37091.00000</td>\n",
       "      <td>720.657592</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>4628</td>\n",
       "      <td>0</td>\n",
       "      <td>1275.727306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y_buy</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.004635</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.067924</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       25%    50%         75%          max        mean  \\\n",
       "isbuyer                0.0    0.0    0.000000      1.00000    0.042632   \n",
       "buy_freq               1.0    1.0    1.000000     15.00000    1.240653   \n",
       "visit_freq             1.0    1.0    2.000000     84.00000    1.852777   \n",
       "buy_interval           0.0    0.0    0.000000    174.62500    0.210008   \n",
       "sv_interval            0.0    0.0    0.104167    184.91670    5.825610   \n",
       "expected_time_buy      0.0    0.0    0.000000     84.28571   -0.198040   \n",
       "expected_time_visit    0.0    0.0    0.000000     91.40192  -10.210786   \n",
       "last_buy              18.0   51.0  105.000000    188.00000   64.729335   \n",
       "last_visit            18.0   51.0  105.000000    188.00000   64.729335   \n",
       "multiple_buy           0.0    0.0    0.000000      1.00000    0.006357   \n",
       "multiple_visit         0.0    0.0    1.000000      1.00000    0.277444   \n",
       "uniq_urls             30.0   75.0  155.000000    206.00000   86.569343   \n",
       "num_checkins         127.0  319.0  802.000000  37091.00000  720.657592   \n",
       "y_buy                  0.0    0.0    0.000000      1.00000    0.004635   \n",
       "\n",
       "                          min  number_distinct  number_nan          std  \n",
       "isbuyer                0.0000                2           0     0.202027  \n",
       "buy_freq               1.0000               11       52257     0.782228  \n",
       "visit_freq             0.0000               64           0     2.921820  \n",
       "buy_interval           0.0000              295           0     3.922016  \n",
       "sv_interval            0.0000             5886           0    17.595442  \n",
       "expected_time_buy   -181.9238              348           0     4.997792  \n",
       "expected_time_visit -187.6156            15135           0    31.879722  \n",
       "last_buy               0.0000              189           0    53.476658  \n",
       "last_visit             0.0000              189           0    53.476658  \n",
       "multiple_buy           0.0000                2           0     0.079479  \n",
       "multiple_visit         0.0000                2           0     0.447742  \n",
       "uniq_urls             -1.0000              207           0    61.969765  \n",
       "num_checkins           1.0000             4628           0  1275.727306  \n",
       "y_buy                  0.0000                2           0     0.067924  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "getDfSummary(ads)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5\\. For the fields with missing values, does it look like the data is missing at random? Are there any other fields that correlate perfectly, or predict that the data is missing? What would be an appropriate method for filling in missing values?\n",
    "\n",
    "Hint: create another data frame that has just the records with a missing value. Get a summary of this data frame using `getDfSummary()` and compare the differences. Do some feature distributions change dramatically?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "      <th>mean</th>\n",
       "      <th>min</th>\n",
       "      <th>number_distinct</th>\n",
       "      <th>number_nan</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>isbuyer</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>buy_freq</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>52257</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>visit_freq</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>84.00000</td>\n",
       "      <td>1.651549</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>48</td>\n",
       "      <td>0</td>\n",
       "      <td>2.147955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>buy_interval</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sv_interval</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.041667</td>\n",
       "      <td>184.91670</td>\n",
       "      <td>5.686388</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>5112</td>\n",
       "      <td>0</td>\n",
       "      <td>17.623555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>expected_time_buy</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>expected_time_visit</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>91.40192</td>\n",
       "      <td>-9.669298</td>\n",
       "      <td>-187.6156</td>\n",
       "      <td>13351</td>\n",
       "      <td>0</td>\n",
       "      <td>31.239030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>last_buy</th>\n",
       "      <td>19.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>106.000000</td>\n",
       "      <td>188.00000</td>\n",
       "      <td>65.741317</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>189</td>\n",
       "      <td>0</td>\n",
       "      <td>53.484622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>last_visit</th>\n",
       "      <td>19.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>106.000000</td>\n",
       "      <td>188.00000</td>\n",
       "      <td>65.741317</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>189</td>\n",
       "      <td>0</td>\n",
       "      <td>53.484622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>multiple_buy</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>multiple_visit</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.255602</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.436203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uniq_urls</th>\n",
       "      <td>30.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>155.000000</td>\n",
       "      <td>206.00000</td>\n",
       "      <td>86.656180</td>\n",
       "      <td>-1.0000</td>\n",
       "      <td>207</td>\n",
       "      <td>0</td>\n",
       "      <td>61.996711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>num_checkins</th>\n",
       "      <td>126.0</td>\n",
       "      <td>318.0</td>\n",
       "      <td>803.000000</td>\n",
       "      <td>37091.00000</td>\n",
       "      <td>721.848518</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>4570</td>\n",
       "      <td>0</td>\n",
       "      <td>1284.504018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y_buy</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.003024</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.054904</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       25%    50%         75%          max        mean  \\\n",
       "isbuyer                0.0    0.0    0.000000      0.00000    0.000000   \n",
       "buy_freq               NaN    NaN         NaN          NaN         NaN   \n",
       "visit_freq             1.0    1.0    2.000000     84.00000    1.651549   \n",
       "buy_interval           0.0    0.0    0.000000      0.00000    0.000000   \n",
       "sv_interval            0.0    0.0    0.041667    184.91670    5.686388   \n",
       "expected_time_buy      0.0    0.0    0.000000      0.00000    0.000000   \n",
       "expected_time_visit    0.0    0.0    0.000000     91.40192   -9.669298   \n",
       "last_buy              19.0   52.0  106.000000    188.00000   65.741317   \n",
       "last_visit            19.0   52.0  106.000000    188.00000   65.741317   \n",
       "multiple_buy           0.0    0.0    0.000000      0.00000    0.000000   \n",
       "multiple_visit         0.0    0.0    1.000000      1.00000    0.255602   \n",
       "uniq_urls             30.0   75.0  155.000000    206.00000   86.656180   \n",
       "num_checkins         126.0  318.0  803.000000  37091.00000  721.848518   \n",
       "y_buy                  0.0    0.0    0.000000      1.00000    0.003024   \n",
       "\n",
       "                          min  number_distinct  number_nan          std  \n",
       "isbuyer                0.0000                1           0     0.000000  \n",
       "buy_freq                  NaN                1       52257          NaN  \n",
       "visit_freq             1.0000               48           0     2.147955  \n",
       "buy_interval           0.0000                1           0     0.000000  \n",
       "sv_interval            0.0000             5112           0    17.623555  \n",
       "expected_time_buy      0.0000                1           0     0.000000  \n",
       "expected_time_visit -187.6156            13351           0    31.239030  \n",
       "last_buy               0.0000              189           0    53.484622  \n",
       "last_visit             0.0000              189           0    53.484622  \n",
       "multiple_buy           0.0000                1           0     0.000000  \n",
       "multiple_visit         0.0000                2           0     0.436203  \n",
       "uniq_urls             -1.0000              207           0    61.996711  \n",
       "num_checkins           1.0000             4570           0  1284.504018  \n",
       "y_buy                  0.0000                2           0     0.054904  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ins=ads[ads.isnull().any(axis=1)]\n",
    "getDfSummary(ins)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6\\. Which variables are binary?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "isbuyer                 True\n",
       "buy_freq               False\n",
       "visit_freq             False\n",
       "buy_interval           False\n",
       "sv_interval            False\n",
       "expected_time_buy      False\n",
       "expected_time_visit    False\n",
       "last_buy               False\n",
       "last_visit             False\n",
       "multiple_buy            True\n",
       "multiple_visit          True\n",
       "uniq_urls              False\n",
       "num_checkins           False\n",
       "y_buy                   True\n",
       "dtype: bool"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bv=ads.dropna().isin([0,1]).all()\n",
    "bv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
